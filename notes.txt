Project Notes

Maybe use int *pc when knowing if there will be a jump branch or jump address
if statement if jumping will be used and update *pc with jump target.

Control Unit:
Opcode of instruction will be used for generating selector values
regWrite: if we write to register, writeback()
regDst: rs, rt, rd location for read or write. regDst on: rd = write value, regDst off: rt = write value
branch: zero from alu
aluSrc: If we need to add two registers or add one register with sign extension to find memory(lw)
ALU code needs function from machine code
memWrite: if we write to memory?
memToReg: If we write the result from alu or from memory
memRead: If we read from memory?
instType: 2 bit code for instruction type, and function field used for ALU Control

lw/sw instType = 00     ALU function = add alu_op = 0010
beq instType = 01       ALU function = subtract alu_op = 0110
R-type instType = 10    ALU function = funct code with alu_op = below

ALU Control:
alu_op  Function
0000    and 
0001    or
0010    add
0110    subtract
0111    slt
1100    nor

For R-Type instructions, regWrite, regDst, instType = 1, 1, 10 respectively

For lw regWrite, aluSrc, instType, memToReg, memRead = 1, 1, 00, 1, 1 respectively

For sw aluSrc, memWrite

For beq branch, instType = 1, 01

JAL and JR new instructions, Extended MIPS CPU Lecture 3 ias 4 8 - 13
1.) check instructions type of jal and jr, so proper fields are checked
2.) new control signals to run the functions 
3.) configure control signals to run the functions that each instruction needs
    a.) JAL: 1.)jump_target instruction  and 2.) update $ra with pc + 4
    b.) JR: 1.)read $ra value and 2.) jump to address in $ra


Sample part 1:

10001110000010110000000000000100 Instruction Type: I
Operation: lw 
Rs: $16 
Rt: $11 
Immediate: 4 (or 0x4)
00000001001010100110100000100010 Instruction Type: R
Operation: sub
Rs: $9
Rt: $10
Rd: $13
Shamt: 0
Funct: 34 (or 0x22)
00000001101010111000100000101010 Instruction Type: R
Operation: slt
Rs: $13
Rt: $11
Rd: $17
Shamt: 0
Funct: 42 (or 0x2a)
00010010001000000000000000000011 Instruction Type: I
Operation: beq
Rs: $17
Rt: $0
Immediate: 3 (or 0x3)
00000001101010110110100000100000 Instruction Type: R
Operation: add
Rs: $13
Rt: $11
Rd: $13
Shamt: 0
Funct: 32 (or 0x20)
00000010001011010110100000100101 Instruction Type: R
Operation: or
Rs: $17
Rt: $13
Rd: $13
Shamt: 0
Funct: 37 (or 0x25)
10101110000011010000000000000000 Instruction Type: I
Operation: sw
Rs: $16
Rt: $13
Immediate: 0 (or 0x0)
10101110000011010000000000000000 Instruction Type: I
Operation: sw
Rs: $16
Rt: $13
Immediate: 0 (or 0x0)

sample part 2 : 

00001100000000000000000000000010
Instruction Type: J
Operation: jal
Immediate: 2 (or 0x2)

00001000000000000000000000000101
Instruction Type: J
Operation: j
Immediate: 5 (or 0x5)

00000000100001010100000000100000
Instruction Type: R
Operation: add
Rs: $4
Rt: $5
Rd: $8
Shamt: 0
Funct: 32 (or 0x20)

00000000111010000001000000100010
Instruction Type: R
Operation: sub
Rs: $7
Rt: $8
Rd: $2
Shamt: 0
Funct: 34 (or 0x22)

00000011111000000000000000001000
Instruction Type: R
Operation: jr
Rs: $31
Rt: $0
Rd: $0
Shamt: 0
Funct: 8 (or 0x8)

10101110000000100000000000000000
Instruction Type: I
Operation: sw
Rs: $16
Rt: $2
Immediate: 0 (or 0x0)
